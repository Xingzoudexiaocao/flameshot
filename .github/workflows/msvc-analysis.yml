# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '44 10 * * 2'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    env:
      VCINSTALLDIR: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/
      Qt5_DIR: ${{ github.workspace }}\build\Qt\${{ matrix.qt_ver }}\${{ matrix.config.qt_arch_install }}\lib\cmake\Qt5\
      QTDIR: ${{ github.workspace }}\build\Qt\${{ matrix.qt_ver }}\${{ matrix.config.qt_arch_install }}\
      # 2020.07
      VCPKG_VERSION: 56fffbe49dfb4dd8fae0940f272c5fd2b86be991
      VCPKG_PACKAGES: openssl-windows
      OPENSSL_ROOT_DIR: ${{ github.workspace }}\vcpkg\installed\${{ matrix.config.vcpkg_triplet }}\
    strategy:
      fail-fast: false
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        config:
          - {
            arch: x86,
            generator: "-G'Visual Studio 16 2019' -A Win32",
            vcpkg_triplet: x86-windows,
            qt_arch: win32_msvc2019,
            qt_arch_install: msvc2019,
            pak_arch: win32
          }
          - {
            arch: x64,
            generator: "-G'Visual Studio 16 2019' -A x64",
            vcpkg_triplet: x64-windows,
            qt_arch: win64_msvc2019_64,
            qt_arch_install: msvc2019_64,
            pak_arch: win64
          }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{ env.build }}
      - name: Restore from cache and run vcpkg
        uses: lukka/run-vcpkg@v4
        with:
          vcpkgArguments: ${{env.VCPKG_PACKAGES}}
          vcpkgDirectory: '${{ github.workspace }}\vcpkg'
          appendedCacheKey: ${{ matrix.config.vcpkg_triplet }}
          vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
          vcpkgTriplet: ${{ matrix.config.vcpkg_triplet }}

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ./build/Qt/${{ matrix.qt_ver }}/${{ matrix.config.qt_arch_install }}
          key: ${{ runner.os }}-QtCache/${{ matrix.qt_ver }}/${{ matrix.config.qt_arch }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target:  ${{ matrix.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Configure
        working-directory: build
        shell: pwsh
        run: |
          cmake ..  ${{matrix.config.generator}}  `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"  `
          -DENABLE_OPENSSL=ON `
          -DCMAKE_BUILD_TYPE=Release  `
          -DRUN_IN_PLACE=${{ contains(matrix.type, 'portable') }}

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
